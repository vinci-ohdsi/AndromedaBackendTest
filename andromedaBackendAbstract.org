#+TITLE: SQLite vs. DuckDB Benchmarking for the Andromeda Back-end Database 
#+AUTHOR: Bill O'Brien
:options-drawer:
#+OPTIONS: ^:nil H:5 num:nil
#+PROPERTY: header-args:R 
#+startup: indent visual
:END:

* Analysis
** Setup

Set org-mode global vars for use across R renv's within this notebook 

Number of rows in simulated database 
#+NAME: nrows
| 10000000 |

Number of /batchApply()/ repetitions 
#+NAME: nreps
| 5      | 

Define list of test functions

#+begin_src R :session s1 :dir c:/andromedaDatabaseAbstract 

  fns <- list(mean = \(x) mean(x$value),
              filter = \(x) x$value[x$value < .01],
              groupSumm = \(x) dplyr::group_by(x, group) %>%
                               dplyr::summarize(meanValue = mean(x$value)))

  saveRDS(fns, './fns.RDS')

#+end_src

#+RESULTS:

** SQLite back-end

This code block uses the SQLite backend from the Andromeda main branch

#+name: sqlite-times 
#+begin_src R :session andromeda-sqlite :dir ./andromedaSqlite :exports code :var nrows=nrows :var nreps=nreps :results value table 

  library(Andromeda)
  fns <- readRDS('../fns.RDS') 
  set.seed(1)

  andromeda <- andromeda()

  andromeda$data <- data.frame(group = sample(0:1, size = nrows[1,1], replace = TRUE),
                               value = runif(n=nrows[1,1]))

  runTest <- function() {
    results <- sapply(fns,
                      \(f) {
                        start <- Sys.time()
                        batchApply(andromeda$data, fun = f,
                                   batchSize = 100000)
                        difftime(Sys.time(), start, units = "secs")
                      } 
                      )

    data.frame(db = 'SQLite', fn = names(fns), runTimeSeconds = results) 
  }

  Reduce(bind_rows, lapply(1:nreps[1,1], \(x) runTest())) 

#+end_src

#+RESULTS: sqlite-times
| SQLite | mean      | 18.0514400005341 |
| SQLite | filter    | 17.9141628742218 |
| SQLite | groupSumm | 18.5683200359344 |
| SQLite | mean      | 19.2234578132629 |
| SQLite | filter    | 19.1031818389893 |
| SQLite | groupSumm | 18.7453920841217 |
| SQLite | mean      | 19.0321750640869 |
| SQLite | filter    | 18.9784891605377 |
| SQLite | groupSumm | 18.8362920284271 |
| SQLite | mean      | 17.7677090167999 |
| SQLite | filter    | 18.1939840316772 |
| SQLite | groupSumm | 18.7508180141449 |
| SQLite | mean      | 23.1512069702148 |
| SQLite | filter    | 20.0993092060089 |
| SQLite | groupSumm | 19.7350361347198 |

#+begin_src R :session andromeda-sqlite :dir ./andromedaSqlite :results output :exports both 
  
  andromeda 

#+end_src

#+RESULTS:
: [90m# Andromeda object[39m
: [90m# Physical location:  C:\Users\VHASLC~1\AppData\Local\Temp\1\RtmpuE4Qqg\file43286fd72bd1.sqlite[39m
: 
: Tables:
: $data (group, value)


** DuckDB back-end

This uses the DuckDB backend from the Andromeda duckdb2 branch 

#+name: duckdb-times 
#+begin_src R :session andromeda-duckdb :dir ./andromedaDuckDb  :exports code  :var nrows=nrows :var nreps=nreps

  library(Andromeda)
  fns <- readRDS('../fns.RDS') 
  set.seed(1)

  andromeda <- andromeda()

  andromeda$data <- data.frame(group = sample(0:1, size = nrows[1,1], replace = TRUE),
                               value = runif(n=nrows[1,1]))

  runTest <- function() {
    results <- sapply(fns,
                      \(f) {
                        start <- Sys.time()
                        batchApply(andromeda$data, fun = f,
                                   batchSize = 100000)
                        difftime(Sys.time(), start, units = "secs")
                      } 
                      )

    data.frame(db = 'DuckDB', fn = names(fns), runTimeSeconds = results) 
  }

  Reduce(bind_rows, lapply(1:nreps[1,1], \(x) runTest()))

#+end_src

#+RESULTS: duckdb-times
| DuckDB | mean      | 2.73550295829773 |
| DuckDB | filter    | 2.73404717445374 |
| DuckDB | groupSumm | 3.45954203605652 |
| DuckDB | mean      | 3.05329608917236 |
| DuckDB | filter    | 2.80071997642517 |
| DuckDB | groupSumm | 3.30366516113281 |
| DuckDB | mean      | 2.72037076950073 |
| DuckDB | filter    | 3.10197496414185 |
| DuckDB | groupSumm |  4.1000120639801 |
| DuckDB | mean      | 3.20873689651489 |
| DuckDB | filter    | 3.58746790885925 |
| DuckDB | groupSumm | 3.84196519851685 |
| DuckDB | mean      | 3.20259499549866 |
| DuckDB | filter    | 3.52941203117371 |
| DuckDB | groupSumm | 4.22183799743652 |

#+begin_src R :session andromeda-duckdb :dir ./andromedaDuckDB :results output :exports both 
  
  andromeda 

#+end_src

#+RESULTS:
: [90m# Andromeda object[39m
: [90m# Physical location:  C:\Users\VHASLCObrieW1\AppData\Local\Temp\1\Rtmp2LqKQc\file4aec70cc6172.duckdb[39m
: 
: Tables:
: $data (group, value)


** batchApply results 

#+begin_src R :session s1 :var s=sqlite-times d=duckdb-times :results graphics :file ./boxplot.jpg 

  library(ggplot2)
  library(tidyr)

  rbind(s, d) %>%
      setNames(c('Database', 'Function', 'Time')) %>% 
      ggplot() +
        geom_boxplot(aes(Database, y = Time)) +
        facet_wrap(~Function) + 
        labs(title = 'Execution time for benchmark',
             y = 'Seconds')  

#+end_src

#+RESULTS:

[[./boxplot.jpg]]


** saveAndromeda results
*** SQLite 
#+begin_src R :session andromeda-sqlite :exports both 
  
  start <- Sys.time()
  saveAndromeda(andromeda, './andromeda.zip')
  sprintf("SQLite save time was %.01f seconds",
          difftime(Sys.time(), start, units = "secs")) 

#+end_src

#+RESULTS:
: SQLite save time was 6.3 seconds

*** DuckDB
#+begin_src R :session andromeda-duckdb :exports both 

  start <- Sys.time()
  saveAndromeda(andromeda, './andromeda.zip')
  sprintf("DuckDB save time was %.01f seconds",
          difftime(Sys.time(), start, units = "secs"))

#+end_src

#+RESULTS:
: DuckDB save time was 4.5 seconds

** loadAndromeda results 
*** SQLite

#+begin_src R :session andromeda-sqlite :exports both 

  start <- Sys.time()
  loadAndromeda('./andromeda.zip')
  sprintf("SQLite load time was %.01f seconds",
          difftime(Sys.time(), start, units = "secs")) 

#+end_src

#+RESULTS:
: SQLite load time was 1.8 seconds

*** DuckDB


#+begin_src R :session andromeda-duckdb :exports both 

  start <- Sys.time()
  loadAndromeda('./andromeda.zip')
  sprintf("DuckDB load time was %.01f seconds",
          difftime(Sys.time(), start, units = "secs"))

#+end_src

#+RESULTS:
: DuckDB load time was 1.3 seconds

** DB file size on disk
*** SQLite

#+begin_src R :session andromeda-sqlite :exports both

  file.remove(list.files(pattern = "*.sqlite"))

  unzip('./andromeda.zip') 

  sprintf("SQLite database file is %.01f MB",
          file.size(list.files(pattern = "\\.sqlite$"))/1E6)

#+end_src

#+RESULTS:
: SQLite database file is 178.9 MB

*** DuckDB

#+begin_src R :session andromeda-duckdb :exports both 
  file.remove(list.files(pattern = "*.duckdb"))

  unzip('./andromeda.zip') 

  sprintf("Duckdb database file is %.01f MB",
          file.size(list.files(pattern = "\\.duckdb$"))/1E6)
  
#+end_src

#+RESULTS:
: Duckdb database file is 71.8 MB






* Project management                                              :no_export:
:LOGBOOK:
CLOCK: [2025-01-07 Tue 09:47]
CLOCK: [2025-01-06 Mon 12:32]--[2025-01-06 Mon 17:00]  =>  4:28
CLOCK: [2025-01-06 Mon 08:58]--[2025-01-06 Mon 12:23] =>  3:25
CLOCK: [2024-12-26 Thu 16:31]--[2024-12-26 Thu 17:00] =>  0:29
:END:

